name: HubSpot Delta Sync (Fast Updates)

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 9-17/2 * * 1-5'  # Every 2 hours, 09‚Äì17 UTC, Mon‚ÄìFri

concurrency:
  group: hubspot-delta-sync      # keep distinct so this runs independently
  cancel-in-progress: false      # allow queued deltas to finish

jobs:
  delta-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      FLY_ACCESS_TOKEN: ${{ secrets.FLY_ACCESS_TOKEN }}
      APP: memra-hubspot-agent-api
      MACHINE: 48e4769a05d568
      FLYCTL_NO_AGENT: 1

    steps:
      - uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Prepare CLI deps & auth
        run: |
          set -Eeuo pipefail
          # jq for JSON parsing
          if ! command -v jq >/dev/null 2>&1; then
            install -d /tmp/bin
            curl -fsSL https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64 -o /tmp/bin/jq
            chmod +x /tmp/bin/jq
            echo "/tmp/bin" >> $GITHUB_PATH
          fi
          # Make flyctl see the token without needing -t each time
          echo "FLYCTL_ACCESS_TOKEN=${FLY_ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Wake app & quick readiness check
        run: |
          set -Eeuo pipefail
          curl -sS "https://${APP}.fly.dev/" >/dev/null || true
          for i in {1..20}; do
            if curl -fsS "https://${APP}.fly.dev/" >/dev/null; then
              echo "‚úÖ App HTTP ready"; exit 0
            fi
            sleep 3
          done
          echo "‚ùå App not HTTP-ready"; exit 1

      - name: Run Delta Pipeline (single SSH session w/ fallback)
        shell: bash
        run: |
          set -Eeo pipefail

          ensure_started_machine() {
            local mid="${MACHINE:-}"

            # If a pinned machine is provided, prefer it
            if [ -n "$mid" ]; then
              state=$(flyctl machines list -a "$APP" --json | jq -r ".[] | select(.id==\"$mid\") | .state")
              if [ -z "$state" ]; then
                echo "‚ö†Ô∏è Pinned machine $mid not found; falling back to discovery"
                mid=""
              elif [ "$state" != "started" ]; then
                flyctl machines start -a "$APP" "$mid" >/dev/null 2>&1 || true
              fi
            fi

            # Discovery fallback
            if [ -z "$mid" ]; then
              mid=$(flyctl machines list -a "$APP" --json | jq -r '.[] | select(.state=="started") | .id' | head -n1 || true)
              if [ -z "$mid" ]; then
                mid=$(flyctl machines list -a "$APP" --json | jq -r '.[0].id' || true)
                [ -z "$mid" ] && { echo "‚ùå No machines found"; exit 1; }
                flyctl machines start -a "$APP" "$mid" >/dev/null 2>&1 || true
              fi
            fi

            # Wait until started
            for i in {1..30}; do
              state=$(flyctl machines list -a "$APP" --json | jq -r ".[] | select(.id==\"$mid\") | .state" || echo "")
              [ "$state" = "started" ] && break || sleep 2
            done
            echo "$mid"
          }

          run_with_retry() {
            local cmd="$1"
            local attempts=0
            local max_attempts=3
            
            while [ $attempts -lt $max_attempts ]; do
              if flyctl ssh console --pty -a "$APP" --machine "$MID" --command "$cmd"; then
                return 0
              fi
              attempts=$((attempts + 1))
              if [ $attempts -lt $max_attempts ]; then
                sleep_time=$((5 * attempts))
                echo "SSH dropped; retrying in ${sleep_time}s..."
                sleep $sleep_time
              fi
            done
            echo "‚ùå SSH failed after $max_attempts retries"
            exit 1
          }

          MID=$(ensure_started_machine)
          echo "üìü Using machine: $MID"

          # Build remote command as a single string (avoid heredoc in YAML)
          run_with_retry 'bash -lc "
            set -Eeo pipefail
            [ -d \"/app/hubspot-agent-2 copy\" ] && mv \"/app/hubspot-agent-2 copy\" \"/app/hubspot-agent-2-copy\" 2>/dev/null || true
            STEP0=\$(find /app -maxdepth 6 -type f -path \"*/tools/step0_hubspot_inventory_merge.py\" -print -quit 2>/dev/null || true)
            if [ -z \"\$STEP0\" ]; then
              DELTA=\$(find /app -maxdepth 6 -type f -path \"*/tools/run_delta_pipeline.py\" -print -quit 2>/dev/null || true)
              [ -z \"\$DELTA\" ] && { echo \"‚ùå Could not find repo/tools\"; exit 2; }
              REPO_DIR=\$(dirname \"\$(dirname \"\$DELTA\")\")
            else
              REPO_DIR=\$(dirname \"\$(dirname \"\$STEP0\")\")
            fi
            REPO_DIR=\$(printf \"%s\" \"\$REPO_DIR\" | tr -d \"\\r\")
            REPO_DIR=\${REPO_DIR//\$'\\n'/}
            cd \"\$REPO_DIR\"
            echo \"üìÅ Repo: \$REPO_DIR\"
            python3 -m compileall -q tools || { echo \"‚ùå Syntax error in tools/\"; exit 3; }
            echo \"‚ö° Running Delta Pipeline...\"
            PYTHONPATH=\"\$REPO_DIR\" python3 tools/run_delta_pipeline.py
            echo \"‚úÖ Delta sync completed\"
          "'

      - name: Delta Summary
        run: |
          echo "üìä Delta pipeline finished (processed recent changes only)."
          echo "‚ÑπÔ∏è Delta pipeline only processes:"
          echo "  ‚Ä¢ Gmail threads from last 48 hours"
          echo "  ‚Ä¢ Only contacts already in HubSpot"
          echo "  ‚Ä¢ Skips Step 0 (HubSpot inventory merge)"
          echo "üîÑ For a full sync, manually trigger 'HubSpot Sync Pipeline' workflow"


