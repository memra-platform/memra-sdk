name: Pre-Meeting Resume Sender

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    # Run every 2 hours
    - cron: '0 */2 * * *'

concurrency:
  group: pre-meeting-resume-sender
  cancel-in-progress: false  # Don't cancel if already running

jobs:
  send-resumes:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      FLY_ACCESS_TOKEN: ${{ secrets.FLY_ACCESS_TOKEN }}
      APP: memra-hubspot-agent-api
      FLYCTL_NO_AGENT: 1

    steps:
      - uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Wake app (HTTP)
        run: |
          curl -sS "https://${APP}.fly.dev/" >/dev/null || true
          echo "‚úÖ Wake request sent"

      - name: Wait for app readiness (HTTP)
        run: |
          set -Eeuo pipefail
          for i in {1..30}; do
            if curl -fsS "https://${APP}.fly.dev/" >/dev/null; then
              echo "‚úÖ App HTTP ready"; exit 0
            fi
            sleep 4
          done
          echo "‚ùå App not HTTP-ready"; exit 1

      - name: Run Pre-Meeting Resume Sender
        shell: bash
        run: |
          set -Eeuo pipefail

          # Install jq for machine management
          ensure_started_machine() {
            if ! command -v jq >/dev/null 2>&1; then
              install -d /tmp/bin
              curl -fsSL https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64 -o /tmp/bin/jq
              chmod +x /tmp/bin/jq
              export PATH="/tmp/bin:$PATH"
            fi
            MID=$(flyctl machines list -a "$APP" --json | jq -r '.[] | select(.state=="started") | .id' | head -n1 || true)
            if [ -z "${MID:-}" ]; then
              MID=$(flyctl machines list -a "$APP" --json | jq -r '.[0].id' || true)
              [ -n "${MID:-}" ] && flyctl machines start -a "$APP" "$MID"
              for i in {1..40}; do
                state=$(flyctl machines list -a "$APP" --json | jq -r ".[] | select(.id==\"$MID\") | .state")
                [ "$state" = "started" ] && break || sleep 3
              done
            fi
            echo "$MID"
          }

          run_with_retry() {
            local cmd="$1"
            local n=0
            until [ $n -ge 3 ]; do
              MID=$(ensure_started_machine)
              flyctl -t "$FLY_ACCESS_TOKEN" ssh console --pty -a "$APP" --machine "$MID" --command "$cmd" && return 0
              echo "SSH dropped; retrying in $((5*(n+1)))s..."
              n=$((n+1)); sleep $((5*n))
            done
            echo "‚ùå SSH failed after retries"; exit 1
          }

          echo "üìß Running Pre-Meeting Resume Sender..."
          
          REMOTE_RUN='bash -lc "
            set -Eeuo pipefail
            cd /app/hubspot-agent-2
            echo \"üìÇ Working directory: \$(pwd)\"
            
            # Verify script exists
            if [ ! -f tools/pre_meeting_resume_sender.py ]; then
              echo \"‚ùå pre_meeting_resume_sender.py not found\"
              exit 1
            fi
            
            echo \"‚úÖ Found pre_meeting_resume_sender.py\"
            echo \"üìù Running in PRODUCTION mode (sending real emails)...\"
            
            # Run the script with production mode (DRY_RUN=false)
            PYTHONPATH=/app/hubspot-agent-2 python3 tools/pre_meeting_resume_sender.py
            
            EXIT_CODE=\$?
            if [ \$EXIT_CODE -eq 0 ]; then
              echo \"‚úÖ Pre-meeting resume sender completed successfully\"
              touch /app/progress/pre_meeting_resume_done
            else
              echo \"‚ùå Pre-meeting resume sender failed with exit code \$EXIT_CODE\"
              exit \$EXIT_CODE
            fi
          "'
          
          run_with_retry "$REMOTE_RUN"

      - name: Summary
        if: always()
        run: |
          echo "üìä Pre-Meeting Resume Sender workflow completed"
          echo "   - Checked for Ding-Booked labels"
          echo "   - Verified recruiters (HubSpot + OSS model)"
          echo "   - Sent resumes to confirmed recruiters"
          echo "   - Applied Ding-Sent-Resume labels"

